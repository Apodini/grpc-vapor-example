//
// ThermostatService+Generated.swift
//
//
// This file was generated by the GRPC Middleware
//

import Vapor
import GRPCVapor

extension ThermostatService {

    func handleMethod(methodName: String, vaporRequest: Request) -> AnyCallHandler? {
        switch methodName {
        case "GetMeasurements":
            return try? ServerStreamingCallHandler<_ThermostatID, _Measurement>(vaporRequest: vaporRequest, procedureCall: self.getMeasurements)
        case "GetThermostatIds":
            return try? ServerStreamingCallHandler<_Empty, _ThermostatID>(vaporRequest: vaporRequest, procedureCall: self.getThermostatIds)
        case "GetThermostatWithId":
            return try? UnaryCallHandler<_ThermostatID, _Thermostat>(vaporRequest: vaporRequest) { req in
                return self.getThermostatWithId(request: req)
            }
        case "UploadMeasurements":
            return try? StreamingCallHandler<_Measurement, _Measurement>(vaporRequest: vaporRequest, procedureCall: self.uploadMeasurements)
        case "CalculateStatistics":
            return try? ClientStreamingCallHandler<_Measurement, _MeasurementStats>(vaporRequest: vaporRequest) { req in
                return self.calculateStatistics(req: req)
            }
        default:
            return nil
        }
    }
}
